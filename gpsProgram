//mainActivity
import android.support.v7.app.AppCompatActivity;
import android.app.Activity;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle; import gps.location.GPStrace; 
public class MainActivity extends AppCompatActivity { 
Button btnShowLocation;
GPStrace gps;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState); 
setContentView(R.layout.activity_main); 
btnShowLocation = (Button)findViewById(R.id.Show_Location);
btnShowLocation.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) { 
gps = new GPStrace(MainActivity.this); 
if (gps.getLocation() != null) {
double latitude = gps.getLatitude();
double longitude = gps.getLongitude(); 
Toast.makeText(getApplicationContext(), "Your Location is \nLat:" + latitude + "\nLong:" + longitude, Toast.LENGTH_LONG).show(); } 
else { //gps.showSettingAlert(); } } }); 
}
}
//GPStrace.java
import android.app.AlertDialog; 
import android.app.Service; 
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent; import android.location.Location; 
import android.location.LocationListener; 
import android.location.LocationManager; 
import android.os.Bundle;

import android.os.IBinder;
import android.provider.Settings; 
public class GPStrace extends Service implements LocationListener {
private final Context mContext; // flag for GPS status
boolean isGPSEnabled = false; // flag for network status
boolean isNetworkEnabled = false;
boolean canGetLocation = false;
Location location; // location 
double latitude; // latitude
double longitude; 
private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters // The minimum time between updates in milliseconds 
private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1 minute 
// Declaring a Location Manager protected 
LocationManager locationManager;
public GPStrace(Context context) { 
this.mContext = context; getLocation(); 
} 

public Location getLocation() { 
try {
locationManager = (LocationManager) mContext .getSystemService(LOCATION_SERVICE); // getting GPS status 
isGPSEnabled = locationManager .isProviderEnabled(LocationManager.GPS_PROVIDER); // getting network status 
isNetworkEnabled = locationManager .isProviderEnabled(LocationManager.NETWORK_PROVIDER); 
if (!isGPSEnabled && !isNetworkEnabled) { // no network provider is enabled } 
else { 
this.canGetLocation = true; // First get location from Network Provider
if (isNetworkEnabled) {
locationManager.requestLocationUpdates( LocationManager.NETWORK_PROVIDER, MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES, this); //Log.d("Network", "Network"); 

if (locationManager != null) {
location = locationManager .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
if (location != null) { latitude = location.getLatitude(); longitude = location.getLongitude();

} 
} 
} // if GPS Enabled get lat/long using GPS Services 
if (isGPSEnabled) { if (location == null) { locationManager.requestLocationUpdates( LocationManager.GPS_PROVIDER, MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES, this); 
Log.d("GPS Enabled", "GPS Enabled");
if (locationManager != null) {
location = locationManager .getLastKnownLocation(LocationManager.GPS_PROVIDER); 
if (location != null) { latitude = location.getLatitude(); longitude = location.getLongitude(); } 
} } } } }
catch (Exception e) { e.printStackTrace(); } return location; }
@Override
public void onLocationChanged(Location location) { } 
@Override
public void onProviderDisabled(String provider) { } 
@Override
public void onProviderEnabled(String provider) { }
@Override
public void onStatusChanged(String provider, int status, Bundle extras) { }
@Override 
public IBinder onBind(Intent arg0) { return null; } /** * Function to get latitude * */ 
public double getLatitude(){ 
if(location != null){ latitude = location.getLatitude(); } // return latitude
return latitude; } /** * Function to get longitude

* */ 
public double getLongitude(){
if(location != null){ 
longitude = location.getLongitude(); }
// return longitude return longitude; } }
